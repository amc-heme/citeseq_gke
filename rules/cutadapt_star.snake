""" Snakemake rules for running STARsolo on 10X data """

""" Extract per-sample fastq paths """
def _get_fq1_paths(wildcards):
    try:
      samples_filtered = SAMPLES_DF[(SAMPLES_DF.exclude == 0) & (SAMPLES_DF.lib_type == wildcards.lib) & (SAMPLES_DF.capture == wildcards.sample)]
    except AttributeError:
      samples_filtered = SAMPLES_DF[(SAMPLES_DF.exclude == 0) & (SAMPLES_DF.lib_type == "gex") & (SAMPLES_DF.capture == wildcards.sample)]

    fq1s = map(lambda x: os.path.join(DATA, x), samples_filtered.fastq1)
    fq1s = list(fq1s)
    
    return fq1s
    
def _get_fq2_paths(wildcards):
    try:
      samples_filtered = SAMPLES_DF[(SAMPLES_DF.exclude == 0) & (SAMPLES_DF.lib_type == wildcards.lib) & (SAMPLES_DF.capture == wildcards.sample)]
    except AttributeError:
      samples_filtered = SAMPLES_DF[(SAMPLES_DF.exclude == 0) & (SAMPLES_DF.lib_type == "gex") & (SAMPLES_DF.capture == wildcards.sample)]

    fq2s = map(lambda x: os.path.join(DATA, x), samples_filtered.fastq2)
    fq2s = list(fq2s)
    
    return fq2s

def _get_fq_count(wildcards):
    return len(_get_fq1_paths(wildcards))

""" Extract per-sample 10X chemistry versions from gex libs """
def _get_chem_version(wildcards):
    chem_version = CAPTURES_DF[CAPTURES_DF.capture == wildcards.sample].chemistry.unique()
    if chem_version == "chromiumV3":
        return [GS_PREFIX+WHITELIST_V3,"--soloUMIlen 12"]
    elif chem_version == "chromiumV2":
        return GS_PREFIX+WHITELIST_V2

""" Extract per-sample TotalSeq versions for adt/hto libs """
def _get_truseq_version(wildcards):
    try:
      if wildcards.lib == "adt":
        truseq_version = CAPTURES_DF[CAPTURES_DF.capture == wildcards.sample].truseq_adt.unique()
      elif wildcards.lib == "hto":
        truseq_version = CAPTURES_DF[CAPTURES_DF.capture == wildcards.sample].truseq_hto.unique()
      if truseq_version == "A":
        return "--clip3pNbases"
      elif truseq_version == "B":
        return "--clip5pNbases"
    except AttributeError:
      pass

""" Extract per-capture targeted for gex libs """
def _get_cells_targeted(wildcards):
    captures_filtered = CAPTURES_DF[CAPTURES_DF.capture == wildcards.sample]
    arg_list = list(captures_filtered.cells_targeted.unique())
    arg_list.append("0.99 10 45000 90000 500 0.01 20000 0.01 10000")
    arg_list = ' '.join([str(elem) for elem in arg_list])
    return arg_list
    
""" Extract per-sample extra arguments for gex libs """
def _get_extra_args(wildcards):
    captures_filtered = CAPTURES_DF[CAPTURES_DF.capture == wildcards.sample]
    return list(captures_filtered.extra_args.unique())

#def _get_dropkick_params(wildcards):
#    dropkick = CAPTURES_DF[CAPTURES_DF.capture_name == wildcards.sample].dropkick.unique()
#    if pd.isna(dropkick):
#        return ('')
#    else:
#        return "--multimanual --manualthresh "+''.join(map(str, dropkick))

ruleorder: starsolo_gex_counts > starsolo_feature 

""" This rule is now only necessary for adt/hto libraries """
rule cutadapt_feature:
    input:
      R1 = _get_fq1_paths,
      R2 = _get_fq2_paths
    output:
      R1 = temp(RESULTS+"/cutadapt/{lib}/{sample}_{lib}_trimmed.R1.fastq.gz"),
      R2 = temp(RESULTS+"/cutadapt/{lib}/{sample}_{lib}_trimmed.R2.fastq.gz")
    params:
      fq_count = _get_fq_count
    log: "logs/{sample}_cutadapt_{lib}.out"
    threads: 3
    conda: "../env_files/cutadapt.yml"
    shell:
      """
      cutadapt -j 24 -l 25 \
        -o {output.R2} \
        <(zcat {input.R2})
      
      if [[ {params.fq_count} == 1 ]]
      then
        cp {input.R1} {output.R1}
      else
        gunzip -c {input.R1} | gzip -c > {output.R1}
      fi
      """

""" This rule processes chromium V2/V3 feature libraries with STARsolo """
rule starsolo_feature:
    input:
      R1 = RESULTS+"/cutadapt/{lib}/{sample}_{lib}_trimmed.R1.fastq.gz",
      R2 = RESULTS+"/cutadapt/{lib}/{sample}_{lib}_trimmed.R2.fastq.gz",
      WHITELISTV3 = WHITELIST_V3,
      WHITELISTV2 = WHITELIST_V2,
      FEATUREINDEX = FEATURE_INDEX
    output:
      RESULTS + "/{lib}/{sample}/{sample}_Log.progress.out",
      RESULTS + "/{lib}/{sample}/{sample}_SJ.out.tab",
      RESULTS + "/{lib}/{sample}/{sample}_Log.final.out",
      RESULTS + "/{lib}/{sample}/{sample}_Log.out",
      RESULTS + "/{lib}/{sample}/{sample}_Solo.out/Barcodes.stats",
      RESULTS + "/{lib}/{sample}/{sample}_Solo.out/Gene/Features.stats",
      RESULTS + "/{lib}/{sample}/{sample}_Solo.out/Gene/Summary.csv",
      RESULTS + "/{lib}/{sample}/{sample}_Solo.out/Gene/raw/barcodes.tsv",
      RESULTS + "/{lib}/{sample}/{sample}_Solo.out/Gene/raw/features.tsv",
      RESULTS + "/{lib}/{sample}/{sample}_Solo.out/Gene/raw/matrix.mtx"
    params:
      chemistry = _get_chem_version,
      truseq = _get_truseq_version,
      out_dir = GS_PREFIX + RESULTS+"/{lib}/{sample}/{sample}_"
    log: "logs/{sample}_star_{lib}.out"
    threads: 3
    conda: "../env_files/star.yml"
    shell:
      """
      STAR --soloType CB_UMI_Simple \
      --soloCBmatchWLtype 1MM_multi_Nbase_pseudocounts \
      --soloUMIfiltering MultiGeneUMI \
      --soloUMIdedup 1MM_Directional \
      --readFilesCommand gunzip -c \
      --runThreadN 12 \
      --outSAMtype None \
      --soloBarcodeReadLength 0 \
      --soloCBwhitelist {params.chemistry} \
      {params.truseq} 10 \
      --genomeDir {input.FEATUREINDEX} \
      --soloCellFilter None \
      --outFileNamePrefix {params.out_dir} \
      --readFilesIn {input.R2} {input.R1}
      
      #find {params.out_dir}* -name "*tsv" -o -name '*mtx' -o -name '*tab' \
      #| grep -v 'SJ/raw/features.tsv' | while read i; do gzip $i; done
      """

""" This rule processes chromium V2/V3 gex libraries with STARsolo """
rule starsolo_gex_counts:
    input:
      R1 = _get_fq1_paths,
      R2 = _get_fq2_paths,
      WHITELISTV3 = WHITELIST_V3,
      WHITELISTV2 = WHITELIST_V2,
      GEXINDEX = GEX_INDEX
    output:
      RESULTS + "/gex/{sample}/{sample}_Log.final.out",
      RESULTS + "/gex/{sample}/{sample}_Log.out",
      RESULTS + "/gex/{sample}/{sample}_Log.progress.out",
      RESULTS + "/gex/{sample}/{sample}_SJ.out.tab",
      RESULTS + "/gex/{sample}/{sample}_Solo.out/Barcodes.stats",
      RESULTS + "/gex/{sample}/{sample}_Solo.out/Velocyto/Features.stats",
      RESULTS + "/gex/{sample}/{sample}_Solo.out/Velocyto/filtered/barcodes.tsv",
      RESULTS + "/gex/{sample}/{sample}_Solo.out/Velocyto/filtered/spliced.mtx",
      RESULTS + "/gex/{sample}/{sample}_Solo.out/Velocyto/filtered/unspliced.mtx",
      RESULTS + "/gex/{sample}/{sample}_Solo.out/Velocyto/filtered/features.tsv",
      RESULTS + "/gex/{sample}/{sample}_Solo.out/Velocyto/filtered/ambiguous.mtx",
      RESULTS + "/gex/{sample}/{sample}_Solo.out/Velocyto/raw/barcodes.tsv",
      RESULTS + "/gex/{sample}/{sample}_Solo.out/Velocyto/raw/spliced.mtx",
      RESULTS + "/gex/{sample}/{sample}_Solo.out/Velocyto/raw/unspliced.mtx",
      RESULTS + "/gex/{sample}/{sample}_Solo.out/Velocyto/raw/features.tsv",
      RESULTS + "/gex/{sample}/{sample}_Solo.out/Velocyto/raw/ambiguous.mtx",
      RESULTS + "/gex/{sample}/{sample}_Solo.out/Velocyto/Summary.csv",
      RESULTS + "/gex/{sample}/{sample}_Solo.out/SJ/raw/features.tsv",
      RESULTS + "/gex/{sample}/{sample}_Solo.out/SJ/raw/barcodes.tsv",
      RESULTS + "/gex/{sample}/{sample}_Solo.out/SJ/raw/matrix.mtx",
      RESULTS + "/gex/{sample}/{sample}_Solo.out/SJ/Summary.csv",
      RESULTS + "/gex/{sample}/{sample}_Solo.out/Gene/Features.stats",
      RESULTS + "/gex/{sample}/{sample}_Solo.out/Gene/filtered/barcodes.tsv",
      RESULTS + "/gex/{sample}/{sample}_Solo.out/Gene/filtered/matrix.mtx",
      RESULTS + "/gex/{sample}/{sample}_Solo.out/Gene/filtered/features.tsv",
      RESULTS + "/gex/{sample}/{sample}_Solo.out/Gene/raw/barcodes.tsv",
      RESULTS + "/gex/{sample}/{sample}_Solo.out/Gene/raw/matrix.mtx",
      RESULTS + "/gex/{sample}/{sample}_Solo.out/Gene/raw/features.tsv",
      RESULTS + "/gex/{sample}/{sample}_Solo.out/Gene/Summary.csv",
      RESULTS + "/gex/{sample}/{sample}_Solo.out/Gene/UMIperCellSorted.txt"
    params:
      chemistry = _get_chem_version,
      out_dir = GS_PREFIX + RESULTS+"/gex/{sample}/{sample}_",
      cells = _get_cells_targeted,
      extra_args = _get_extra_args
    log: "logs/{sample}_star_gex_counts.out"
    threads: 3
    conda: "../env_files/star.yml"
    shell:
      """
      STAR --soloType CB_UMI_Simple \
      --soloCBmatchWLtype 1MM_multi_Nbase_pseudocounts \
      --soloUMIfiltering MultiGeneUMI \
      --soloUMIdedup 1MM_Directional \
      --readFilesCommand gunzip -c \
      --runThreadN 12 \
      --soloBarcodeReadLength 0 \
      --outFilterScoreMin 30 \
      --soloCBwhitelist {params.chemistry} \
      --genomeDir {input.GEXINDEX} \
      --clipAdapterType CellRanger4 \
      --soloFeatures Gene SJ Velocyto \
      --soloCellFilter EmptyDrops_CR {params.cells} {params.extra_args} \
      --limitOutSJcollapsed 2000000 \
      --outFileNamePrefix {params.out_dir} \
      --outSAMtype None \
      --readFilesIn $(echo {input.R2} | sed 's/ /,/g') $(echo {input.R1} | sed 's/ /,/g')
      
      #find {params.out_dir}* -name "*tsv" -o -name '*mtx' -o -name '*tab' \
      #| grep -v 'SJ/raw/features.tsv' | while read i; do gzip $i; done
      """

rule h5ad_from_10x_mtx:
    input:
      RESULTS + "/gex/{sample}/{sample}_Solo.out/Gene/raw/barcodes.tsv",
      RESULTS + "/gex/{sample}/{sample}_Solo.out/Gene/raw/matrix.mtx",
      RESULTS + "/gex/{sample}/{sample}_Solo.out/Gene/raw/features.tsv"
    output:
      temp(RESULTS+"/dropkick/{sample}_anndata.h5ad")
    params:
      job_name = "h5ad_from_10x_mtx",
      mtx_dir = RESULTS+"/gex/{sample}/{sample}_Solo.out/Gene/raw/"
    log: "logs/{sample}_h5ad"
    threads: 1
    conda: "../env_files/anndata.yml"
    shell:
      """
        python3 ../inst/convert_mtx.py {params.mtx_dir} {output}
      """

""" This rule provides X """
rule dropkick_run:
    input:
      RESULTS+"/dropkick/{sample}_anndata.h5ad"
    output:
      RESULTS+"/dropkick/{sample}_coef.png",
      RESULTS+"/dropkick/{sample}_score.png",
      RESULTS+"/dropkick/{sample}_dropkick_scores.csv",
      temp(RESULTS+"/dropkick/{sample}_dropkick.h5ad")
    params:
      job_name = "dropkick_run",
      out_dir = RESULTS+"/dropkick/"
      #manual = _get_dropkick_params
    log: "logs/{sample}_dropkick_run"
    threads: 5
    conda: "../env_files/dropkick-git.yml"
    shell:
      """
        #dropkick run -j 5 {params.manual} --csv -o {params.out_dir} {input}
        dropkick run -j 5 {params.manual} --csv -o {params.out_dir} {input}
      """

rule dropkick_qc:
    input:
      RESULTS+"/dropkick/{sample}_anndata.h5ad"
    output:
      RESULTS+"/dropkick/{sample}-qc.png"
    params:
      job_name = "dropkick_qc",
      out_dir = RESULTS+"/dropkick/",
      out_file = RESULTS+"/dropkick/{sample}_qc.png"
    log: "logs/{sample}_dropkick_qc"
    threads: 1
    conda: "../env_files/dropkick-git.yml"
    shell:
      """
        dropkick qc -o {params.out_dir} {input}
        mv {params.out_file} {output}
      """
	
